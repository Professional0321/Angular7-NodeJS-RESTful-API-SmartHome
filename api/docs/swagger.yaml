swagger: "2.0.0"
info:
  title: Smart Home RESTful API
  description: | 
    Documentation for Smart Home REST API
    
     For consuming some endpoints it is required to authenticate with API access`token`. If token expires you will need to refresh it. Token expires after `30 min`.
  version: 1.0.0
  contact: 
    name: Dawid Krakowczyk
    email: dawid.krakowczyk.1996@gmail.com

host: "https://sleepy-garden-23787.herokuapp.com"
basePath: /
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
tags:
  - name: Auth
    description: Auth operations
  - name: Data
    description: Data operations
  - name: Alarm
    description: Alarm operations
paths:
  /auth/register:
    post:
      tags: 
      - Auth
      summary: Register a new user
      description: Register a new user in application
      parameters:
        - name: first_name
          description: User first name
          in: formData
          type: String
          required: true
        - name: last_name
          description: User last name
          in: formData
          type: String
          required: true
        - name: email
          description: User email
          in: formData
          type: String
          required: true
        - name: password
          description: User password
          in: formData
          type: String
          required: true
          schema:
           $ref: '#definitions/Register'
      produces:
        - application/json
      responses:
        201:
          description: CREATED
          schema:
           $ref: '#definitions/Register'
        500: 
          description: INTERNAL SERVER ERROR
  /auth/login:
    post:
      tags: 
      - Auth
      summary: Login with user credentials
      description: Login for existing users
      parameters:
        - name: email
          description: User email
          in: formData
          type: String
          required: true
        - name: password
          description: User password
          in: formData
          type: String
          required: true
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: '#definitions/LoginResponse'
        401:
          description: UNAUTHORIZED
        500: 
          description: INTERNAL SERVER ERROR
  /data:
    get:
      tags:
      - Data 
      summary: Get all data
      parameters: []
      produces:
        - application/json
      responses:
        200:
          description: SUCCESS
          schema:
            $ref: '#definitions/postData'
        400:
          description: BAD REQUEST
        401:
          description: UNAUTHORIZED
        500: 
          description: INTERNAL SERVER ERROR        
    post:
      security:
      - Bearer: []
      tags:
      - Data 
      summary: Upload new content 
      description: This endpoint allows to upload new content such as temperature and humidity
      parameters:
        - name: temperature
          description: |
            Temperature value (min: 0, max: 50)
          in: formData
          type: Number
          required: true
        - name:  Humidity
          description: Humidity value (min: 25, max: 95)
          in: formData
          type: Number
          required: true
          schema:
           $ref: '#definitions/postData'
      produces:
        - application/json
      responses:
        201:
          description: CREATED
          schema:
            $ref: '#definitions/postData'
        400:
          description: BAD REQUEST
        401:
          description: UNAUTHORIZED
        500: 
          description: INTERNAL SERVER ERROR
    delete:
      security:
      - Bearer: []
      tags:
      - Data 
      summary: Wipe database
      description: This endpoint allows to wipe database
      parameters: []
      produces: []
      responses:
        201:
          description: SUCCESS
        400:
          description: BAD REQUEST
        401:
          description: UNAUTHORIZED
        500: 
          description: INTERNAL SERVER ERROR
  /data/:currentDay:
    get:
      tags:
      - Data 
      summary: Get all data from specified day
      parameters: 
        - name: currentDay
          description: |
            Day (yyyy-mm-dd | yyyy/mm/dd)
          in: formData
          type: String
          required: true
      produces:
        - application/json
      responses:
        200:
          description: SUCCESS
          schema:
            $ref: '#definitions/postData'
        400:
          description: BAD REQUEST
        401:
          description: UNAUTHORIZED
        500: 
          description: INTERNAL SERVER ERROR
    delete:
      security:
      - Bearer: []
      tags:
      - Data 
      summary: Delete all data from specified day
      parameters: 
        - name: currentDay
          description: |
            Day (yyyy-mm-dd | yyyy/mm/dd)
          in: formData
          type: String
          required: true
      produces: []
      responses:
        200:
          description: SUCCESS
        400:
          description: BAD REQUEST
        401:
          description: UNAUTHORIZED
        500: 
          description: INTERNAL SERVER ERROR 
  /alarm:
    get:
      tags:
      - Alarm 
      summary: Get alarm status
      parameters: []
      produces:
        - application/json
      responses:
        200:
          description: SUCCESS
          schema:
            $ref: '#definitions/alarmData'
        400:
          description: BAD REQUEST
        401:
          description: UNAUTHORIZED
        500: 
          description: INTERNAL SERVER ERROR        
  /alarm/short:
    get:
      tags:
      - Alarm 
      summary: Return simplified response for Arduino users (0/1)
      parameters: []
      produces:
        - application/json
      responses:
        200:
          description: 0/1
        400:
          description: BAD REQUEST
        401:
          description: UNAUTHORIZED
        500: 
          description: INTERNAL SERVER ERROR
  /alarm/create:
    post:
      security:
      - Bearer: []
      tags:
      - Alarm 
      summary: Create an alarm when it does not exist yet
      parameters: []
      produces:
        - application/json
      responses:
        200:
          description: SUCCESS
          schema:
            $ref: '#definitions/alarmData'
        400:
          description: BAD REQUEST
        401:
          description: UNAUTHORIZED
        500: 
          description: INTERNAL SERVER ERROR
  /alarm/enable:
    post:
      security:
      - Bearer: []
      tags:
      - Alarm 
      summary: Enable alarm
      parameters: []
      produces:
        - application/json
      responses:
        200:
          description: Alarm enabled
        400:
          description: BAD REQUEST
        401:
          description: UNAUTHORIZED
        500: 
          description: INTERNAL SERVER ERROR
  /alarm/disable:
    post:
      security:
      - Bearer: []
      tags:
      - Alarm 
      summary: Disable alarm
      parameters: []
      produces:
        - application/json
      responses:
        200:
          description: Alarm disabled
        400:
          description: BAD REQUEST
        401:
          description: UNAUTHORIZED
        500: 
          description: INTERNAL SERVER ERROR
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: Header

definitions:
  Register:
      required:
        - first_name
        - last_name
        - email
        - password
      properties:
        first_name:
          type: string
          example: Jane
        last_name:
          type: string
          example: Doe
        email:
          type: string
          example: example@gmail.com
        password:
          type: string
          example: password123!
  Login:
    required:
    - email
    - password
    properties:
      email: 
        type: string
        example: example@gmail.com
      password:
        type: string
        example: Password123
  LoginResponse:
    properties:
      token:
        type: string
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2dpbiI6InRvbWFzejEyMyIsInJvbGUiOiJBRE1JTiIsImlhdCI6MTU0OTcyNjkxMiwiZXhwIjoxNTQ5NzI4NzEyfQ.zRnIv_-SIyL3uJYjs3dnki11xbptFZF0qxrW2B_Mt2U
  Token:
    properties:
      token:
        type: string
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2dpbiI6InRvbWVrMSIsInJvbGUiOiJGT1JFU1RFUiIsImlhdCI6MTU0OTgyMjI4MSwiZXhwIjoxNTQ5OTA4NjgxfQ.Y4qSNGFblEm73LRxxKG-Ruf9p6hjn-4HfOzQHZn751A
  postData:
    properties:
      temperature: 
        type: Number
        example: 23
      humidity:
        type: Number
        example: 55
      date:
        type: String
        example: 2019-08-05(yyyy-mm-dd)
  alarmData:
    properties:
      status: 
        type: Boolean
        example: true
 
